#!/usr/bin/env python3
"""
AI + Email Automation Test
Tests the workflow: User Input → AI Processing → Email Sending
"""
import os
import sys
import requests
import json
import logging

# Configure logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# Set SMTP environment variables
os.environ['SMTP_HOST'] = 'mail.privateemail.com'
os.environ['SMTP_PORT'] = '587'
os.environ['SMTP_USER'] = 'automation-engine@dxtr-labs.com'
os.environ['SMTP_PASSWORD'] = 'Lakshu11042005$'

print("🤖 Sam AI Assistant - AI + Email Workflow Test")
print("🧠 Testing AI processing + Email automation...")

BASE_URL = "http://127.0.0.1:8002"

def authenticate_user():
    """Authenticate and get session details"""
    print("\n🔐 Authenticating user...")
    
    # Try signup first (will fail if user exists)
    signup_data = {
        "username": "aitest",
        "email": "aitest@example.com",
        "password": "testpass123"
    }
    
    response = requests.post(f"{BASE_URL}/api/auth/signup", json=signup_data)
    print(f"Signup Status: {response.status_code}")
    
    # Login
    login_data = {
        "email": "aitest@example.com",
        "password": "testpass123"
    }
    
    login_response = requests.post(f"{BASE_URL}/api/auth/login", json=login_data)
    print(f"Login Status: {login_response.status_code}")
    
    if login_response.status_code == 200:
        login_result = login_response.json()
        user_data = login_result.get('user', {})
        user_id = user_data.get('user_id')
        session_token = login_result.get('session_token')
        print(f"✅ Authenticated successfully - User ID: {user_id}")
        return login_response.cookies, user_id, session_token
    else:
        print(f"❌ Login failed: {login_response.status_code}")
        return None, None, None

def create_ai_email_workflow(user_id, user_input, recipient_email):
    """Create workflow: AI Processing → Email Sending"""
    workflow = {
        "workflow": {
            "workflow_id": "ai-email-workflow-001",
            "name": "AI Content Generation + Email Automation",
            "description": f"Process user input with AI and send result to {recipient_email}",
            "user_id": user_id,
            "trigger": {
                "type": "manual",
                "name": "Manual Trigger",
                "description": "Manually triggered for immediate execution"
            },
            "actions": [
                {
                    "action_id": "ai-processing-001",
                    "node": "mcpLLM",
                    "name": "AI Content Generation",
                    "parameters": {
                        "prompt": user_input,
                        "context": "You are a helpful AI assistant. Process the user's request and provide a thoughtful, well-structured response. Make it engaging and informative.",
                        "max_tokens": 1000,
                        "temperature": 0.7,
                        "ai_service": "inhouse",
                        "service_selection": "inhouse"
                    }
                },
                {
                    "action_id": "email-send-001", 
                    "node": "emailSend",
                    "name": "Send AI Response via Email",
                    "parameters": {
                        "toEmail": recipient_email,
                        "subject": "🤖 AI Response - Your Request Has Been Processed",
                        "text": f"""Hello!

Here's the AI-generated response to your request:

--- ORIGINAL REQUEST ---
{user_input}

--- AI RESPONSE ---
{{ai_generated_content}}

---

Generated by Sam AI Assistant
Powered by Custom MCP LLM
Timestamp: 2025-07-14

This is an automated response from the AI + Email workflow system."""
                    }
                }
            ],
            "metadata": {
                "created_by": "Sam AI Assistant",
                "created_date": "2025-07-14T05:00:00Z",
                "purpose": "AI content generation and email delivery",
                "recipient": recipient_email,
                "execution_mode": "immediate"
            }
        }
    }
    
    return workflow

def execute_automation(cookies, session_token, workflow_json):
    """Execute the AI + Email workflow"""
    print("\n🚀 Sending AI + Email workflow to automation engine...")
    
    payload = {"workflow_json": workflow_json}
    
    if session_token:
        cookies.set('session_token', session_token)
    
    headers = {"Content-Type": "application/json"}
    
    response = requests.post(
        f"{BASE_URL}/api/automations/execute",
        json=payload,
        cookies=cookies,
        headers=headers
    )
    
    print(f"Automation Engine Response Status: {response.status_code}")
    
    if response.status_code == 200:
        result = response.json()
        print(f"✅ AI + Email workflow executed successfully!")
        print(f"📋 Result: {json.dumps(result, indent=2)}")
        return True
    else:
        print(f"❌ Workflow execution failed: {response.text}")
        return False

def main():
    """Main execution function"""
    print("\n🧠 AI + EMAIL AUTOMATION TEST")
    print("=" * 60)
    
    # Get user input
    user_input = input("\n💭 Enter your request for AI processing: ").strip()
    if not user_input:
        user_input = "Write a motivational message about achieving goals and staying focused on what's important in life."
    
    recipient_email = input("📧 Enter recipient email (or press Enter for default): ").strip()
    if not recipient_email:
        recipient_email = "slakshanand1105@gmail.com"
    
    print(f"\n📝 User Input: {user_input}")
    print(f"📧 Recipient: {recipient_email}")
    
    # Step 1: Authenticate
    cookies, user_id, session_token = authenticate_user()
    if not user_id:
        print("❌ Authentication failed. Exiting.")
        return
    
    # Step 2: Create AI + Email workflow
    workflow_json = create_ai_email_workflow(user_id, user_input, recipient_email)
    print(f"\n📋 Workflow JSON created:")
    print(json.dumps(workflow_json, indent=2))
    
    # Step 3: Execute the workflow
    success = execute_automation(cookies, session_token, workflow_json)
    
    if success:
        print(f"\n🎉 SUCCESS! AI + Email workflow completed!")
        print(f"🧠 Your input was processed by AI")
        print(f"📧 AI response sent to {recipient_email}")
        print(f"📱 Please check the email inbox!")
    else:
        print(f"\n❌ Workflow execution failed. Please check the logs.")

if __name__ == "__main__":
    main()
