import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
import os
from dotenv import load_dotenv

# Load environment variables
load_dotenv('.env.local')

def test_smtp_simple():
    """Simple SMTP test without database dependencies"""
    print("🚀 Simple SMTP Email Test")
    print("=" * 50)
    
    # Load SMTP credentials
    smtp_host = os.getenv("SMTP_HOST")
    smtp_port = int(os.getenv("SMTP_PORT", 587))
    smtp_user = os.getenv("SMTP_USER")
    smtp_pass = os.getenv("SMTP_PASSWORD")
    
    print(f"📧 SMTP Configuration:")
    print(f"  Host: {smtp_host}")
    print(f"  Port: {smtp_port}")
    print(f"  User: {smtp_user}")
    print(f"  Password: ***{smtp_pass[-4:] if smtp_pass else 'None'}")
    
    if not all([smtp_host, smtp_user, smtp_pass]):
        print("❌ Missing SMTP credentials!")
        return False
    
    # Email content
    to_email = "slakshanand1105@gmail.com"
    subject = "🏠 Roomify Sales Pitch - Your Perfect College Roommate Awaits!"
    
    email_content = """
🏠 Find Your Perfect College Roommate with Roomify! 🎓

Hey there, future college superstar! 

Are you tired of scrolling through endless social media posts hoping to find that perfect roommate? Look no further! Roomify is here to revolutionize your college housing experience.

🌟 Why Choose Roomify?
✅ Smart Matching Algorithm - We pair you with compatible roommates based on lifestyle, study habits, and interests
✅ Verified Student Profiles - All users are verified college students, ensuring safety and authenticity
✅ Campus-Specific Search - Find roommates within your specific college or university
✅ Budget-Friendly Options - Filter by budget to find affordable housing solutions
✅ 24/7 Support - Our team is always here to help you navigate your housing journey

🎯 Special Features:
• Personality compatibility tests
• Shared interest matching
• Study schedule alignment
• Cleanliness preference matching
• Social activity level compatibility

🚀 Ready to find your perfect roommate? 
Join thousands of students who have already found their ideal living situation through Roomify!

Download the Roomify app today and start your journey to the perfect college living experience!

Best regards,
The Roomify Team
Your One-Stop Place for College Roommate Solutions

---
This email was generated by DXTR Labs AI Automation Platform
Visit us at: automation-engine@dxtr-labs.com
"""
    
    print(f"\n📮 Preparing email...")
    print(f"  To: {to_email}")
    print(f"  Subject: {subject}")
    print(f"  Content Length: {len(email_content)} characters")
    
    try:
        # Create email message
        msg = MIMEMultipart("alternative")
        msg["From"] = smtp_user
        msg["To"] = to_email
        msg["Subject"] = subject
        
        # Attach text content
        msg.attach(MIMEText(email_content, "plain"))
        
        print(f"\n🔌 Connecting to SMTP server...")
        
        # Connect and send email
        with smtplib.SMTP(smtp_host, smtp_port) as server:
            print(f"✅ Connected to {smtp_host}:{smtp_port}")
            
            print(f"🔒 Starting TLS encryption...")
            server.starttls()
            print(f"✅ TLS encryption enabled")
            
            print(f"🔐 Authenticating with {smtp_user}...")
            server.login(smtp_user, smtp_pass)
            print(f"✅ Authentication successful")
            
            print(f"📤 Sending email to {to_email}...")
            server.send_message(msg)
            print(f"✅ Email sent successfully!")
        
        print(f"\n🎉 EMAIL DELIVERY SUCCESSFUL!")
        print(f"Check {to_email} for the Roomify sales pitch!")
        print(f"The AI-generated content has been delivered successfully!")
        
        return True
        
    except Exception as e:
        print(f"\n❌ Email sending failed: {e}")
        
        # Provide specific troubleshooting
        if "authentication failed" in str(e).lower():
            print("🔧 Troubleshooting: Authentication failed")
            print("  - Check if the email password is correct")
            print("  - Verify SMTP server settings")
            print("  - Consider using App Password if using Gmail")
        elif "connection" in str(e).lower():
            print("🔧 Troubleshooting: Connection issue")
            print("  - Check internet connection")
            print("  - Verify SMTP server and port")
            print("  - Check firewall settings")
        
        return False

def test_alternative_smtp():
    """Test with Gmail SMTP as alternative"""
    print("\n🔄 Testing Alternative SMTP (Gmail)")
    print("=" * 50)
    
    # Gmail SMTP settings
    gmail_host = "smtp.gmail.com"
    gmail_port = 587
    
    print(f"📧 Alternative SMTP Configuration:")
    print(f"  Host: {gmail_host}")
    print(f"  Port: {gmail_port}")
    print(f"  Note: Requires Gmail App Password for authentication")
    
    return False

def main():
    print("🚀 Direct SMTP Email Delivery Test")
    print("Using credentials from .env.local")
    print("=" * 60)
    
    # Test primary SMTP
    success = test_smtp_simple()
    
    if not success:
        print("\n⚠️ Primary SMTP failed. Consider these alternatives:")
        print("1. Update PrivateEmail.com SMTP settings")
        print("2. Use Gmail with App Password")
        print("3. Use alternative email service (SendGrid, Mailgun, etc.)")
        
        # Show alternative options
        test_alternative_smtp()
    
    print(f"\n📋 Summary:")
    if success:
        print("✅ Email system is working perfectly!")
        print("✅ SMTP configuration successful")
        print("✅ AI-generated content delivered")
    else:
        print("❌ Email delivery failed - check SMTP credentials")
        print("📞 Contact your email provider for SMTP settings")

if __name__ == "__main__":
    main()
