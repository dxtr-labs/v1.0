import requests
import json
import asyncio

def execute_morning_email_automation():
    """
    Create and execute a proper workflow through the automation engine
    to send morning email to slakshanand1105@gmail.com
    """
    
    print("🌅 MORNING EMAIL AUTOMATION - FULL EXECUTION")
    print("=" * 60)
    
    # Step 1: Authenticate
    signup_data = {
        "username": "morningautomation",
        "email": "morningautomation@example.com", 
        "password": "automation123"
    }
    
    print("🔐 Authenticating user...")
    
    # Signup (if needed)
    signup_response = requests.post("http://127.0.0.1:8001/api/auth/signup", json=signup_data)
    print(f"Signup Status: {signup_response.status_code}")
    
    # Login
    login_data = {
        "email": "morningautomation@example.com",
        "password": "automation123"
    }
    
    login_response = requests.post("http://127.0.0.1:8001/api/auth/login", json=login_data)
    if login_response.status_code != 200:
        print(f"❌ Login failed: {login_response.text}")
        return
    
    session_token = login_response.json().get('session_token')
    user_id = login_response.json().get('user', {}).get('user_id')
    print(f"✅ Authenticated successfully - User ID: {user_id}")
    
    # Step 2: Create proper workflow JSON for automation engine
    workflow_json = {
        "workflow_id": "morning-email-automation-001",
        "name": "Morning Positivity Email Automation",
        "description": "Send daily morning positivity email to slakshanand1105@gmail.com",
        "user_id": user_id,
        "trigger": {
            "type": "manual",
            "name": "Manual Trigger",
            "description": "Manually triggered for immediate execution"
        },
        "actions": [
            {
                "action_id": "email-send-001", 
                "node": "emailSend",
                "name": "Send Morning Email",
                "parameters": {
                    "toEmail": "slakshanand1105@gmail.com",
                    "subject": "🌅 Good Morning! Your Daily Dose of Positivity - July 14, 2025",
                    "text": '''Good morning, beautiful soul! ☀️

"The morning brings new hope, new chances, and new possibilities. Embrace this beautiful day with open arms!" ✨

✨ YOUR DAILY AFFIRMATIONS ✨
🌟 Today is full of amazing opportunities waiting for me
💪 I have the strength and courage to achieve my dreams
😊 I choose joy and positivity in everything I do
🚀 Every challenge is a chance for me to grow stronger
💖 I am grateful for this beautiful new day

🌈 Remember, you are amazing just as you are! Today is July 14, 2025, and it's going to be an incredible day. 

The sun is shining just for you, the birds are singing your success song, and the universe is conspiring to make your dreams come true! ✨

Take a deep breath, smile that beautiful smile of yours, and step into this day with confidence. You've got this! 💪

Sending you warm hugs and positive vibes to start your Monday morning right! 🤗

Wishing you a day filled with joy, success, and beautiful moments! 🌺

With love and positivity,
Sam - Your Personal Assistant 🤖💖

---
📧 Generated by Sam AI Assistant | July 14, 2025
🌅 Daily Morning Positivity Automation'''
                }
            }
        ],
        "metadata": {
            "created_by": "Sam AI Assistant",
            "created_date": "2025-07-14T03:30:00Z",
            "purpose": "Daily morning motivation and positivity",
            "recipient": "slakshanand1105@gmail.com",
            "execution_mode": "immediate"
        }
    }
    
    print("📋 Workflow JSON created:")
    print(json.dumps(workflow_json, indent=2))
    print()
    
    # Step 3: Send workflow to automation engine for execution
    print("🚀 Sending workflow to automation engine for execution...")
    
    execution_request = {
        "workflow_json": workflow_json
    }
    
    execution_response = requests.post(
        "http://127.0.0.1:8001/api/automations/execute",
        json=execution_request,
        cookies={"session_token": session_token},
        headers={"Content-Type": "application/json"}
    )
    
    print(f"Automation Engine Response Status: {execution_response.status_code}")
    
    if execution_response.status_code == 200:
        response_data = execution_response.json()
        print("✅ AUTOMATION EXECUTION SUCCESSFUL!")
        print(json.dumps(response_data, indent=2))
        
        if response_data.get('success'):
            print("\n🎉 SUCCESS SUMMARY:")
            print(f"📧 Email sent to: slakshanand1105@gmail.com") 
            print(f"📬 Subject: 🌅 Good Morning! Your Daily Dose of Positivity - July 14, 2025")
            print(f"🤖 Executed by: Sam AI Assistant")
            print(f"⏰ Execution time: July 14, 2025")
            print(f"✨ Status: COMPLETED")
            return True
        else:
            print(f"❌ Execution reported as failed: {response_data}")
            return False
    else:
        print(f"❌ Failed to execute automation: {execution_response.text}")
        return False

if __name__ == "__main__":
    try:
        print("🤖 Sam AI Assistant - Morning Email Automation System")
        print("🌅 Preparing to send beautiful morning content...")
        print()
        
        success = execute_morning_email_automation()
        
        if success:
            print("\n" + "=" * 60)
            print("🎉 MISSION ACCOMPLISHED! 🎉")
            print("The morning email has been sent through the automation engine!")
            print("📧 slakshanand1105@gmail.com should receive the email shortly!")
            print("🌟 Have a wonderful day! ☀️")
        else:
            print("\n❌ Automation execution failed. Please check the logs.")
            
    except requests.exceptions.ConnectionError:
        print("❌ Cannot connect to backend server. Is it running on port 8001?")
    except Exception as e:
        print(f"❌ Error: {e}")
