#!/usr/bin/env python3
"""
Email Automation Test with Environment Variables
"""
import os
import sys
import requests
import json
import logging

# Configure logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# Set SMTP environment variables based on your .env.local configuration
os.environ['SMTP_HOST'] = 'mail.privateemail.com'
os.environ['SMTP_PORT'] = '587'
os.environ['SMTP_USER'] = 'automation-engine@dxtr-labs.com'
os.environ['SMTP_PASSWORD'] = 'Lakshu11042005$'

print("🤖 Sam AI Assistant - Morning Email Automation Test")
print("🌅 Testing email automation with explicit environment variables...")
print(f"✅ SMTP_HOST: {os.environ.get('SMTP_HOST')}")
print(f"✅ SMTP_PORT: {os.environ.get('SMTP_PORT')}")
print(f"✅ SMTP_USER: {os.environ.get('SMTP_USER')}")
print(f"✅ SMTP_PASSWORD: {'***' + os.environ.get('SMTP_PASSWORD', '')[-4:] if os.environ.get('SMTP_PASSWORD') else 'Not set'}")

# Backend URL
BASE_URL = "http://127.0.0.1:8002"

def authenticate_user():
    """Authenticate and get session for automation"""
    print("\n🔐 Authenticating user...")
    
    # Try to sign up first (will fail if user exists)
    signup_data = {
        "email": "morningautomation@example.com",
        "password": "automation123",
        "name": "Morning Automation"
    }
    
    response = requests.post(f"{BASE_URL}/api/auth/signup", json=signup_data)
    print(f"Signup Status: {response.status_code}")
    
    # Login to get session
    login_data = {
        "email": "morningautomation@example.com",
        "password": "automation123"
    }
    
    login_response = requests.post(f"{BASE_URL}/api/auth/login", json=login_data)
    
    print(f"Login Status: {login_response.status_code}")
    print(f"Login Response: {login_response.text}")
    
    if login_response.status_code == 200:
        login_result = login_response.json()
        print(f"Login Result: {login_result}")
        # Extract user_id from nested user object
        user_data = login_result.get('user', {})
        user_id = user_data.get('user_id')
        session_token = login_result.get('session_token')
        print(f"✅ Authenticated successfully - User ID: {user_id}")
        print(f"🔑 Session Token: {session_token[:20]}..." if session_token else "❌ No session token")
        return login_response.cookies, user_id, session_token
    else:
        print(f"❌ Login failed: {login_response.status_code} - {login_response.text}")
        return None, None, None

def create_workflow_json(user_id):
    """Create the workflow JSON for morning email automation"""
    workflow = {
        "workflow": {  # Wrap the workflow in a "workflow" key as expected by automation engine
            "workflow_id": "morning-email-automation-001",
            "name": "Morning Positivity Email Automation",
            "description": "Send daily morning positivity email to slakshanand1105@gmail.com",
            "user_id": user_id,
            "trigger": {
                "type": "manual",
                "name": "Manual Trigger",
                "description": "Manually triggered for immediate execution"
            },
        "actions": [
            {
                "action_id": "email-send-001",
                "node": "emailSend",
                "name": "Send Morning Email",
                "parameters": {
                    "toEmail": "slakshanand1105@gmail.com",
                    "subject": "🌅 Good Morning! Your Daily Dose of Positivity - July 14, 2025",
                    "text": '''Good morning, beautiful soul! ☀️

"The morning brings new hope, new chances, and new possibilities. Embrace this beautiful day with open arms!" ✨

✨ YOUR DAILY AFFIRMATIONS ✨
🌟 Today is full of amazing opportunities waiting for me
💪 I have the strength and courage to achieve my dreams
😊 I choose joy and positivity in everything I do
🚀 Every challenge is a chance for me to grow stronger
💖 I am grateful for this beautiful new day

🌈 Remember, you are amazing just as you are! Today is July 14, 2025, and it's going to be an incredible day. 

The sun is shining just for you, the birds are singing your success song, and the universe is conspiring to make your dreams come true! ✨

Take a deep breath, smile that beautiful smile of yours, and step into this day with confidence. You've got this! 💪

Sending you warm hugs and positive vibes to start your Monday morning right! 🤗

Wishing you a day filled with joy, success, and beautiful moments! 🌺

With love and positivity,
Sam - Your Personal Assistant 🤖💖

---
📧 Generated by Sam AI Assistant | July 14, 2025
🌅 Daily Morning Positivity Automation'''
                }
            }
        ],
        "metadata": {
            "created_by": "Sam AI Assistant",
            "created_date": "2025-07-14T03:30:00Z",
            "purpose": "Daily morning motivation and positivity",
            "recipient": "slakshanand1105@gmail.com",
            "execution_mode": "immediate"
        }
        }  # Close the "workflow" wrapper
    }
    
    return workflow

def execute_automation(cookies, session_token, workflow_json):
    """Execute the automation workflow"""
    print("\n🚀 Sending workflow to automation engine for execution...")
    
    # Backend expects 'workflow_json' key
    payload = {"workflow_json": workflow_json}
    
    # Set session token as a cookie
    if session_token:
        cookies.set('session_token', session_token)
    
    headers = {"Content-Type": "application/json"}
    
    response = requests.post(
        f"{BASE_URL}/api/automations/execute",
        json=payload,
        cookies=cookies,
        headers=headers
    )
    
    print(f"Automation Engine Response Status: {response.status_code}")
    
    if response.status_code == 200:
        result = response.json()
        print(f"✅ Automation executed successfully!")
        print(f"📋 Result: {json.dumps(result, indent=2)}")
        return True
    else:
        print(f"❌ Automation execution failed: {response.text}")
        return False

def main():
    """Main execution function"""
    print("\n🌅 MORNING EMAIL AUTOMATION - ENVIRONMENT TEST")
    print("=" * 60)
    
    # Step 1: Authenticate
    cookies, user_id, session_token = authenticate_user()
    print(f"Debug - Cookies: {cookies}")
    print(f"Debug - User ID: {user_id}")
    print(f"Debug - Session Token: {session_token[:20]}..." if session_token else "No session token")
    
    if not user_id:
        print("❌ Authentication failed. Exiting.")
        return False
    
    # Step 2: Create workflow
    workflow_json = create_workflow_json(user_id)
    print(f"\n📋 Workflow JSON created:")
    print(json.dumps(workflow_json, indent=2))
    
    # Step 3: Execute automation
    success = execute_automation(cookies, session_token, workflow_json)
    
    if success:
        print(f"\n🎉 SUCCESS! Morning email automation completed!")
        print(f"📧 Email should be sent to slakshanand1105@gmail.com")
        print(f"📱 Please check your email inbox!")
    else:
        print(f"\n❌ Automation execution failed. Please check the logs.")
    
    return success

if __name__ == "__main__":
    main()
