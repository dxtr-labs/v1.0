{"input": "Daily, verify fuel bills received via SMS with actual consumption from our database for Vehicle ABC-123. If there's a discrepancy, email admin@mycompany.com.", "output": "{\"workflow\": {\"trigger\": {\"node\": \"cron\", \"parameters\": {\"hour\": 23, \"minute\": 59}}, \"logic\": [{\"node\": \"DatabaseQuery\", \"parameters\": {\"sql_query\": \"SELECT fuel_consumption_liters, fuel_cost FROM vehicle_records WHERE vehicle_id = 'ABC-123' AND date = CURRENT_DATE\", \"output_key\": \"actual_fuel_data\"}}, {\"node\": \"ifElse\", \"parameters\": {\"condition\": \"{{$node['DatabaseQuery'].json.actual_fuel_data[0].fuel_cost != $input.sms_bill_amount}}\", \"truePath\": [{\"node\": \"LLMGenerateContent\", \"parameters\": {\"prompt\": \"Draft an email summarizing the fuel discrepancy for vehicle ABC-123. Actual: {{$node['DatabaseQuery'].json.actual_fuel_data[0].fuel_cost}}, Billed: {{$input.sms_bill_amount}}\", \"input_data_path\": \"actual_fuel_data,sms_bill_amount\", \"output_key\": \"discrepancy_email_body\"}}, {\"node\": \"emailSend\", \"parameters\": {\"toEmail\": \"admin@mycompany.com\", \"subject\": \"Fuel Discrepancy Alert for ABC-123\", \"text\": \"{{$node['LLMGenerateContent'].json.discrepancy_email_body}}\"}}], \"falsePath\": [{\"node\": \"emailSend\", \"parameters\": {\"toEmail\": \"admin@mycompany.com\", \"subject\": \"Fuel Verification: Match for ABC-123\", \"text\": \"Fuel bill for ABC-123 matches records.\"}}]}}], \"actions\": []}}"}
{"input": "When a customer submits a support ticket, automatically fetch their order history, generate a personalized response, and email it to them.", "output": "{\"workflow\": {\"trigger\": {\"node\": \"webhook\", \"parameters\": {\"endpoint\": \"/support-ticket\", \"method\": \"POST\"}}, \"logic\": [{\"node\": \"DatabaseQuery\", \"parameters\": {\"sql_query\": \"SELECT * FROM orders WHERE customer_email = '{{$input.customer_email}}' ORDER BY order_date DESC LIMIT 5\", \"output_key\": \"customer_orders\"}}, {\"node\": \"LLMGenerateContent\", \"parameters\": {\"prompt\": \"Generate a personalized customer support response based on their ticket: {{$input.ticket_content}} and order history: {{$node['DatabaseQuery'].json.customer_orders}}\", \"input_data_path\": \"ticket_content,customer_orders\", \"output_key\": \"support_response\"}}, {\"node\": \"emailSend\", \"parameters\": {\"toEmail\": \"{{$input.customer_email}}\", \"subject\": \"Re: Your Support Request #{{$input.ticket_id}}\", \"text\": \"{{$node['LLMGenerateContent'].json.support_response}}\"}}], \"actions\": []}}"}
{"input": "Every Monday, check inventory levels for all products and email a reorder report to purchasing@company.com if any items are below reorder threshold.", "output": "{\"workflow\": {\"trigger\": {\"node\": \"cron\", \"parameters\": {\"dayOfWeek\": 1, \"hour\": 9, \"minute\": 0}}, \"logic\": [{\"node\": \"DatabaseQuery\", \"parameters\": {\"sql_query\": \"SELECT product_id, product_name, current_stock, reorder_level FROM products WHERE current_stock <= reorder_level\", \"output_key\": \"low_stock_items\"}}, {\"node\": \"ifElse\", \"parameters\": {\"condition\": \"{{$node['DatabaseQuery'].json.low_stock_items.length > 0}}\", \"truePath\": [{\"node\": \"LLMGenerateContent\", \"parameters\": {\"prompt\": \"Generate a professional reorder report for the following low stock items: {{$node['DatabaseQuery'].json.low_stock_items}}\", \"input_data_path\": \"low_stock_items\", \"output_key\": \"reorder_report\"}}, {\"node\": \"emailSend\", \"parameters\": {\"toEmail\": \"purchasing@company.com\", \"subject\": \"Weekly Inventory Reorder Report - {{$date.today}}\", \"text\": \"{{$node['LLMGenerateContent'].json.reorder_report}}\"}}], \"falsePath\": [{\"node\": \"emailSend\", \"parameters\": {\"toEmail\": \"purchasing@company.com\", \"subject\": \"Weekly Inventory Report - All Stock Levels Adequate\", \"text\": \"Good news! All inventory levels are above reorder thresholds this week.\"}}]}}], \"actions\": []}}"}
{"input": "When an employee's timesheet is submitted, validate it against project assignments, calculate overtime, and email a summary to their manager.", "output": "{\"workflow\": {\"trigger\": {\"node\": \"webhook\", \"parameters\": {\"endpoint\": \"/timesheet-submitted\", \"method\": \"POST\"}}, \"logic\": [{\"node\": \"DatabaseQuery\", \"parameters\": {\"sql_query\": \"SELECT * FROM project_assignments WHERE employee_id = '{{$input.employee_id}}' AND is_active = true\", \"output_key\": \"project_assignments\"}}, {\"node\": \"DatabaseQuery\", \"parameters\": {\"sql_query\": \"SELECT manager_email FROM employees WHERE employee_id = '{{$input.employee_id}}'\", \"output_key\": \"manager_info\"}}, {\"node\": \"LLMGenerateContent\", \"parameters\": {\"prompt\": \"Analyze timesheet data: {{$input.timesheet_data}} against project assignments: {{$node['DatabaseQuery'].json.project_assignments}}. Calculate total hours, overtime, and generate a manager summary.\", \"input_data_path\": \"timesheet_data,project_assignments\", \"output_key\": \"timesheet_summary\"}}, {\"node\": \"emailSend\", \"parameters\": {\"toEmail\": \"{{$node['DatabaseQuery'].json.manager_info[0].manager_email}}\", \"subject\": \"Timesheet Summary for Employee {{$input.employee_id}} - Week {{$date.week}}\", \"text\": \"{{$node['LLMGenerateContent'].json.timesheet_summary}}\"}}], \"actions\": []}}"}
{"input": "Daily at 6 PM, fetch today's sales data from the API, generate insights, and send a report to the sales team.", "output": "{\"workflow\": {\"trigger\": {\"node\": \"cron\", \"parameters\": {\"hour\": 18, \"minute\": 0}}, \"logic\": [{\"node\": \"DatabaseQuery\", \"parameters\": {\"api_endpoint\": \"https://api.company.com/sales/daily\", \"method\": \"GET\", \"query_params\": {\"date\": \"{{$date.today}}\"}, \"headers\": {\"Authorization\": \"Bearer {{$env.SALES_API_KEY}}\"}, \"output_key\": \"daily_sales\"}}, {\"node\": \"LLMGenerateContent\", \"parameters\": {\"prompt\": \"Analyze today's sales data and generate insights with key metrics, top performers, and recommendations: {{$node['DatabaseQuery'].json.daily_sales}}\", \"input_data_path\": \"daily_sales\", \"output_key\": \"sales_insights\"}}, {\"node\": \"emailSend\", \"parameters\": {\"toEmail\": \"sales-team@company.com\", \"subject\": \"Daily Sales Report - {{$date.today}}\", \"text\": \"{{$node['LLMGenerateContent'].json.sales_insights}}\"}}], \"actions\": []}}"}
{"input": "When a high-value customer places an order, check their loyalty status, calculate rewards, and send a personalized thank you email.", "output": "{\"workflow\": {\"trigger\": {\"node\": \"webhook\", \"parameters\": {\"endpoint\": \"/order-placed\", \"method\": \"POST\"}}, \"logic\": [{\"node\": \"ifElse\", \"parameters\": {\"condition\": \"{{$input.order_value >= 1000}}\", \"truePath\": [{\"node\": \"DatabaseQuery\", \"parameters\": {\"sql_query\": \"SELECT loyalty_tier, total_spent, rewards_balance FROM customers WHERE customer_id = '{{$input.customer_id}}'\", \"output_key\": \"customer_loyalty\"}}, {\"node\": \"LLMGenerateContent\", \"parameters\": {\"prompt\": \"Generate a personalized thank you email for high-value customer. Order: {{$input.order_details}}, Loyalty info: {{$node['DatabaseQuery'].json.customer_loyalty}}\", \"input_data_path\": \"order_details,customer_loyalty\", \"output_key\": \"thank_you_email\"}}, {\"node\": \"emailSend\", \"parameters\": {\"toEmail\": \"{{$input.customer_email}}\", \"subject\": \"Thank You for Your Order #{{$input.order_id}}\", \"text\": \"{{$node['LLMGenerateContent'].json.thank_you_email}}\"}}], \"falsePath\": []}}], \"actions\": []}}"}
{"input": "When vehicle maintenance is due, check driver availability, schedule appointment, and notify both driver and maintenance team.", "output": "{\"workflow\": {\"trigger\": {\"node\": \"webhook\", \"parameters\": {\"endpoint\": \"/maintenance-due\", \"method\": \"POST\"}}, \"logic\": [{\"node\": \"DatabaseQuery\", \"parameters\": {\"sql_query\": \"SELECT driver_id, driver_email, availability FROM drivers WHERE vehicle_id = '{{$input.vehicle_id}}'\", \"output_key\": \"driver_info\"}}, {\"node\": \"DatabaseQuery\", \"parameters\": {\"api_endpoint\": \"https://api.maintenanceshop.com/schedule\", \"method\": \"POST\", \"body\": {\"vehicle_id\": \"{{$input.vehicle_id}}\", \"service_type\": \"{{$input.maintenance_type}}\", \"preferred_date\": \"{{$date.tomorrow}}\"}, \"output_key\": \"appointment_details\"}}, {\"node\": \"LLMGenerateContent\", \"parameters\": {\"prompt\": \"Generate maintenance notification for driver and shop. Vehicle: {{$input.vehicle_id}}, Appointment: {{$node['DatabaseQuery'].json.appointment_details}}\", \"input_data_path\": \"vehicle_id,appointment_details\", \"output_key\": \"maintenance_notification\"}}, {\"node\": \"emailSend\", \"parameters\": {\"toEmail\": \"{{$node['DatabaseQuery'].json.driver_info[0].driver_email}}\", \"subject\": \"Vehicle Maintenance Scheduled - {{$input.vehicle_id}}\", \"text\": \"{{$node['LLMGenerateContent'].json.maintenance_notification}}\"}}, {\"node\": \"emailSend\", \"parameters\": {\"toEmail\": \"maintenance@company.com\", \"subject\": \"New Maintenance Appointment - {{$input.vehicle_id}}\", \"text\": \"{{$node['LLMGenerateContent'].json.maintenance_notification}}\"}}], \"actions\": []}}"}
{"input": "Weekly on Friday, compile all support tickets, analyze trends, and send an executive summary to management.", "output": "{\"workflow\": {\"trigger\": {\"node\": \"cron\", \"parameters\": {\"dayOfWeek\": 5, \"hour\": 17, \"minute\": 0}}, \"logic\": [{\"node\": \"DatabaseQuery\", \"parameters\": {\"sql_query\": \"SELECT ticket_id, category, priority, status, created_date, resolved_date FROM support_tickets WHERE created_date >= CURRENT_DATE - INTERVAL 7 DAY\", \"output_key\": \"weekly_tickets\"}}, {\"node\": \"LLMGenerateContent\", \"parameters\": {\"prompt\": \"Analyze weekly support ticket trends and generate executive summary with key metrics, common issues, and recommendations: {{$node['DatabaseQuery'].json.weekly_tickets}}\", \"input_data_path\": \"weekly_tickets\", \"output_key\": \"executive_summary\"}}, {\"node\": \"emailSend\", \"parameters\": {\"toEmail\": \"management@company.com\", \"subject\": \"Weekly Support Analysis - Week of {{$date.week_start}}\", \"text\": \"{{$node['LLMGenerateContent'].json.executive_summary}}\"}}], \"actions\": []}}"}
{"input": "When a security alert is triggered, fetch system logs, analyze the threat, and notify the security team with recommendations.", "output": "{\"workflow\": {\"trigger\": {\"node\": \"webhook\", \"parameters\": {\"endpoint\": \"/security-alert\", \"method\": \"POST\"}}, \"logic\": [{\"node\": \"DatabaseQuery\", \"parameters\": {\"api_endpoint\": \"https://api.securitylogs.com/logs\", \"method\": \"GET\", \"query_params\": {\"timestamp_from\": \"{{$input.alert_time}}\", \"severity\": \"high\"}, \"headers\": {\"Authorization\": \"Bearer {{$env.SECURITY_API_KEY}}\"}, \"output_key\": \"security_logs\"}}, {\"node\": \"LLMGenerateContent\", \"parameters\": {\"prompt\": \"Analyze security alert and logs to assess threat level and recommend actions. Alert: {{$input.alert_details}}, Logs: {{$node['DatabaseQuery'].json.security_logs}}\", \"input_data_path\": \"alert_details,security_logs\", \"output_key\": \"threat_analysis\"}}, {\"node\": \"emailSend\", \"parameters\": {\"toEmail\": \"security-team@company.com\", \"subject\": \"URGENT: Security Alert Analysis - {{$input.alert_id}}\", \"text\": \"{{$node['LLMGenerateContent'].json.threat_analysis}}\"}}], \"actions\": []}}"}
{"input": "Monthly, analyze customer churn data, identify at-risk customers, and create personalized retention campaigns.", "output": "{\"workflow\": {\"trigger\": {\"node\": \"cron\", \"parameters\": {\"day\": 1, \"hour\": 10, \"minute\": 0}}, \"logic\": [{\"node\": \"DatabaseQuery\", \"parameters\": {\"sql_query\": \"SELECT customer_id, last_order_date, total_orders, churn_score FROM customers WHERE churn_score > 0.7 AND last_order_date < CURRENT_DATE - INTERVAL 30 DAY\", \"output_key\": \"at_risk_customers\"}}, {\"node\": \"loop\", \"parameters\": {\"items\": \"{{$node['DatabaseQuery'].json.at_risk_customers}}\", \"actions\": [{\"node\": \"DatabaseQuery\", \"parameters\": {\"sql_query\": \"SELECT * FROM customer_preferences WHERE customer_id = '{{$loop.item.customer_id}}'\", \"output_key\": \"customer_preferences\"}}, {\"node\": \"LLMGenerateContent\", \"parameters\": {\"prompt\": \"Create personalized retention email for at-risk customer. Customer data: {{$loop.item}}, Preferences: {{$node['DatabaseQuery'].json.customer_preferences}}\", \"input_data_path\": \"item,customer_preferences\", \"output_key\": \"retention_email\"}}, {\"node\": \"emailSend\", \"parameters\": {\"toEmail\": \"{{$loop.item.customer_email}}\", \"subject\": \"We miss you! Special offer inside\", \"text\": \"{{$node['LLMGenerateContent'].json.retention_email}}\"}}]}}], \"actions\": []}}"}
