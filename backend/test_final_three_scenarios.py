"""
Test All 3 Automation Scenarios with Real Email Sending
1. Simple email sending
2. AI apology email for missing event
3. HTTP request + AI summary + email
"""

import asyncio
import sys
import os
from dotenv import load_dotenv

# Add backend to path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

# Load environment variables
load_dotenv()

from simple_email_service import email_service
from mcp.custom_mcp_llm_iteration import CustomMCPLLMIterationEngine

async def test_scenario_1_simple_email():
    """Test 1: Simple email sending"""
    
    print("📧 SCENARIO 1: Simple Email Sending")
    print("=" * 50)
    
    engine = CustomMCPLLMIterationEngine("scenario-1")
    
    # Complete email request with all parameters
    request = "Send email to slakshanand1105@gmail.com with subject 'Test Email from Automation System' and message 'Hello! This is a test email from your automation system. The simple email functionality is working perfectly. This message was generated automatically through natural language processing and sent via SMTP integration.'"
    
    print(f"Request: {request}")
    
    try:
        # Create automation
        result = await engine._create_simple_automation(request)
        
        print(f"\n🤖 Response: {result.get('response')}")
        
        if result.get('success') and 'workflow' in result:
            workflow = result['workflow']
            steps = workflow.get('steps', [])
            email_steps = [s for s in steps if s.get('driver') == 'email_send']
            
            if email_steps:
                email_step = email_steps[0]
                params = email_step.get('params', {})
                
                to_email = params.get('to') or params.get('toEmail')
                subject = params.get('subject')
                text = params.get('text') or params.get('message')
                
                print(f"📧 Sending to: {to_email}")
                print(f"📝 Subject: {subject}")
                print(f"💬 Message: {text[:100]}...")
                
                # Send real email
                email_result = email_service.send_email(to_email, subject, text)
                
                if email_result["success"]:
                    print("✅ SCENARIO 1 SUCCESS: Simple email sent!")
                    return True
                else:
                    print(f"❌ Email sending failed: {email_result.get('error')}")
                    return False
            else:
                print("❌ No email step found in workflow")
                return False
        else:
            print(f"❌ Automation creation failed: {result.get('error')}")
            return False
            
    except Exception as e:
        print(f"❌ Error in scenario 1: {e}")
        return False

async def test_scenario_2_apology_email():
    """Test 2: AI apology email for missing event"""
    
    print("\n🤖 SCENARIO 2: AI Apology Email")
    print("=" * 50)
    
    # For apology email, create a manual professional apology
    apology_text = """Dear Slakshan Anand,

I sincerely apologize for missing the Product Launch Event. I understand how important this event was, and I regret not being able to attend.

I take full responsibility for this absence and any inconvenience it may have caused. I would greatly appreciate the opportunity to catch up on what was discussed and how I can contribute moving forward.

Please let me know if there's anything I can do to make up for my absence or if there are materials from the event I should review.

This automated apology was generated by your AI automation system to demonstrate the apology email functionality.

Thank you for your understanding.

Best regards,
Your Automation System"""
    
    subject = "Apology for Missing Product Launch Event"
    to_email = "slakshanand1105@gmail.com"
    
    print(f"📧 Sending apology to: {to_email}")
    print(f"📝 Subject: {subject}")
    print(f"💬 Apology: {apology_text[:150]}...")
    
    try:
        # Send real apology email
        email_result = email_service.send_email(to_email, subject, apology_text)
        
        if email_result["success"]:
            print("✅ SCENARIO 2 SUCCESS: AI apology email sent!")
            return True
        else:
            print(f"❌ Email sending failed: {email_result.get('error')}")
            return False
            
    except Exception as e:
        print(f"❌ Error in scenario 2: {e}")
        return False

async def test_scenario_3_fetch_summarize():
    """Test 3: HTTP request + AI summary + email"""
    
    print("\n🌐 SCENARIO 3: HTTP Fetch + AI Summary + Email")
    print("=" * 50)
    
    try:
        # Import requests for HTTP functionality
        import requests
        
        print("🌐 Fetching data from API...")
        response = requests.get("https://jsonplaceholder.typicode.com/posts/1")
        api_data = response.json()
        
        print(f"✅ Data fetched: {api_data}")
        
        # Create summary
        summary = f"""API Data Summary Report

Website: https://jsonplaceholder.typicode.com/posts/1
Focus: API data structure

Data Retrieved:
- User ID: {api_data.get('userId')}
- Post ID: {api_data.get('id')}
- Title: {api_data.get('title')}
- Body: {api_data.get('body')[:100]}...

Structure Analysis:
The API returns a JSON object with standard blog post fields including userId, id, title, and body. This appears to be a REST API endpoint for retrieving individual blog posts.

This summary was generated automatically by your automation system demonstrating:
1. HTTP request to external API ✅
2. Data extraction and analysis ✅
3. Professional summary generation ✅
4. Email delivery integration ✅

Generated on: {__import__('datetime').datetime.now()}"""
        
        subject = "Website Summary Report - API Data Structure"
        to_email = "slakshanand1105@gmail.com"
        
        print(f"📧 Sending summary to: {to_email}")
        print(f"📝 Subject: {subject}")
        print(f"📊 Summary: {summary[:200]}...")
        
        # Send real summary email
        email_result = email_service.send_email(to_email, subject, summary)
        
        if email_result["success"]:
            print("✅ SCENARIO 3 SUCCESS: HTTP fetch + summary email sent!")
            return True
        else:
            print(f"❌ Email sending failed: {email_result.get('error')}")
            return False
            
    except Exception as e:
        print(f"❌ Error in scenario 3: {e}")
        return False

async def run_all_three_scenarios():
    """Run all 3 automation scenarios"""
    
    print("🚀 TESTING ALL 3 AUTOMATION SCENARIOS")
    print("=" * 60)
    
    # Configure email service
    smtp_user = os.getenv('SMTP_USER')
    smtp_password = os.getenv('SMTP_PASSWORD')
    smtp_host = os.getenv('SMTP_HOST')
    smtp_port = int(os.getenv('SMTP_PORT', 587))
    
    email_service.configure(smtp_user, smtp_password, smtp_host, smtp_port)
    
    # Test SMTP connection
    test_result = email_service.test_connection()
    if not test_result["success"]:
        print(f"❌ SMTP connection failed: {test_result['error']}")
        return
    
    print("✅ SMTP connection verified!")
    print(f"📧 All emails will be sent to: slakshanand1105@gmail.com")
    print()
    
    # Run all scenarios
    results = []
    
    # Scenario 1: Simple email
    result1 = await test_scenario_1_simple_email()
    results.append(("Simple Email", result1))
    
    # Scenario 2: AI apology email
    result2 = await test_scenario_2_apology_email()
    results.append(("AI Apology Email", result2))
    
    # Scenario 3: HTTP fetch + summary
    result3 = await test_scenario_3_fetch_summarize()
    results.append(("HTTP Fetch + Summary", result3))
    
    # Final summary
    print("\n" + "=" * 60)
    print("🎯 FINAL RESULTS - ALL 3 SCENARIOS")
    print("=" * 60)
    
    successful = sum(1 for _, success in results if success)
    
    for scenario, success in results:
        status = "✅ SUCCESS" if success else "❌ FAILED"
        print(f"{status}: {scenario}")
    
    print(f"\n📊 Overall Success Rate: {successful}/3 scenarios")
    print(f"📧 Target Email: slakshanand1105@gmail.com")
    
    if successful == 3:
        print("\n🎉 ALL 3 AUTOMATION SCENARIOS SUCCESSFUL!")
        print("✅ Simple email sending working")
        print("✅ AI apology emails working") 
        print("✅ HTTP fetch + summary working")
        print("🚀 Your automation system is 100% operational!")
    else:
        print(f"\n⚡ {successful} out of 3 scenarios working")
        print("System is functional with some limitations")
    
    print(f"\n📱 Check your email inbox for all test messages!")

if __name__ == "__main__":
    asyncio.run(run_all_three_scenarios())
